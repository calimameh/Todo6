openapi: 3.0.3
info:
  title: Workflow 1 API
  version: '88'
  description: Simple Todo Workflow Process
servers:
  - url: http://localhost:3000/api/v1
    description: Development Server
tags:
  - name: TodoItem
    description: Operations related to the TodoItem bounded context.
paths:
  /todo items:
    post:
      summary: Complete Todo Item
      description: Executes the "Complete Todo Item" command. This is an asynchronous operation that results in one or more events.
      operationId: completeTodoItem
      tags:
        - TodoItem
      responses:
        '201':
          description: 'Created: The resource was created successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItem'
        '202':
          description: 'Accepted: The command has been accepted for processing.'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteTodoItemRequest'
    get:
      summary: Fetch User Todo List
      description: Retrieves a representation of a Todo Item or a list of them. This is a synchronous query operation.
      operationId: fetchUserTodoList
      tags:
        - TodoItem
      responses:
        '200':
          description: Successful retrieval of data.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /todo items/{todoID}:
    put:
      summary: Update Todo Item
      description: Executes the "Update Todo Item" command. This is an asynchronous operation that results in one or more events.
      operationId: updateTodoItem
      tags:
        - TodoItem
      responses:
        '200':
          description: 'OK: The resource was updated successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      parameters:
        - $ref: '#/components/parameters/TodoItemId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTodoItemRequest'
    delete:
      summary: Delete Todo Item
      description: Executes the "Delete Todo Item" command. This is an asynchronous operation that results in one or more events.
      operationId: deleteTodoItem
      tags:
        - TodoItem
      responses:
        '204':
          description: 'No Content: The resource was deleted successfully.'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      parameters:
        - $ref: '#/components/parameters/TodoItemId'
components:
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          example: An error occurred.
        code:
          type: string
          example: ERROR_CODE
    TodoItem:
      type: object
      description: Represents a Todo Item in the system.
      properties:
        todoID:
          type: integer
          description: The Todo ID of the Todo Item.
          example: '1'
        todoTitle:
          type: string
          description: The Todo Title of the Todo Item.
          example: Buy groceries
        description:
          type: string
          description: The Description of the Todo Item.
          example: Weekly shopping
        dueDate:
          type: string
          description: The Due Date of the Todo Item.
          example: '2023-10-15'
        priorityLevel:
          type: string
          description: The Priority Level of the Todo Item.
          example: High
        category:
          type: string
          description: The Category of the Todo Item.
          example: Personal
        tags:
          type: string
          description: The Tags of the Todo Item.
          example: Shopping
        completionDate:
          type: string
          description: The Completion Date of the Todo Item.
          example: '2023-10-16'
        completionNotes:
          type: string
          description: The Completion Notes of the Todo Item.
          example: Done
        deletionReason:
          type: string
          description: The Deletion Reason of the Todo Item.
          example: Not needed
        technology:
          type: string
          description: The Technology of the Todo Item.
          example: Social
        field:
          type: string
          description: The Field of the Todo Item.
          example: Tech
      required:
        - todoID
        - todoTitle
    User:
      type: object
      description: Represents a User in the system.
      properties:
        userID:
          type: string
          description: The User ID of the User.
          example: U001
        userName:
          type: string
          description: The User Name of the User.
          example: Alice
        existingTodoItems:
          type: integer
          description: The Existing Todo Items of the User.
          example: '5'
        categoriesAvailable:
          type: string
          description: The Categories Available of the User.
          example: Personal, Work
        priorityLevels:
          type: string
          description: The Priority Levels of the User.
          example: High, Medium, Low
        tagsAvailable:
          type: string
          description: The Tags Available of the User.
          example: Shopping, Finance
      required:
        - userID
        - userName
    CreateTodoItemRequest:
      type: object
      properties:
        todoTitle:
          type: string
          example: Buy groceries
        description:
          type: string
          example: Weekly shopping
        dueDate:
          type: string
          example: '2023-10-15'
        priorityLevel:
          type: string
          example: High
        category:
          type: string
          example: Personal
        tags:
          type: string
          example: Shopping
      required:
        - todoTitle
    UpdateTodoItemRequest:
      type: object
      properties:
        newTitle:
          type: string
        newDescription:
          type: string
        newDueDate:
          type: string
        newPriorityLevel:
          type: string
        newCategory:
          type: string
    CompleteTodoItemRequest:
      type: object
      properties:
        completionDate:
          type: string
          example: '2023-10-16'
        completionNotes:
          type: string
          example: Done
  parameters:
    TodoItemId:
      name: todoID
      in: path
      required: true
      description: The unique identifier for the Todo Item.
      schema:
        type: string
    UserId:
      name: userID
      in: path
      required: true
      description: The unique identifier for the User.
      schema:
        type: string
  responses:
    BadRequest:
      description: 'Bad Request: The server cannot or will not process the request due to something that is perceived to be a client error.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: 'Not Found: The server can not find the requested resource.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: 'Internal Server Error: The server has encountered a situation it doesn''t know how to handle.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
